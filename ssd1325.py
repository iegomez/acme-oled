import posix
import struct
from ctypes import addressof, create_string_buffer, sizeof, string_at
from fcntl import ioctl
from spi_ctypes import *
import time
from os import path

SSD1325_CS	= 14#chip select display
SSD1325_DCX	= 67#data comand pin
SSD1325_RST	= 68#rst pin 

SSD1305_SETLOWCOLUMN	   = 0x00 #= 0x00 - 0F Set the lower nibble of the column start address register for Page Addressing Mode 
SSD1305_SETHIGHCOLUMN	  = 0x10 #= 0x10 -= 0x1F Set the higher nibble of the column start address register for Page Addressing Mode.
SSD1305_MEMORYMODE		 = 0x20 # 00b Hor Add, 01b Vert Add, 10b Page Add, 11b NA
SSD1305_SETSTARTCOLUMN	 = 0x21 # Column Start Address 0 - 0x83, Column End Address 0 - 0x83
SSD1305_SETSTARTPAGE	   = 0x22 # Page Start Address 0 - 0x07, Page End Address 0 - 0x07
SSD1305_SETSTARTLINE	   = 0x40 # Set display start line register from 0 - 0x3F.
SSD1305_SETCONTRAST		= 0x81 # 1 out of 256 contrast steps. Contrast increases as the value increases.
SSD1305_SETBRIGHTNESS	  = 0x82 # 1 out of 256 contrast steps. Brightness increases as the value increases.
SSD1305_LOOK_UP_TABLE	  = 0x91 # Set look-up table
SSD1305_SEGREMAP0		  = 0xA0 # Column address 0 is mapped to SEG0
SSD1305_SEGREMAP1		  = 0xA1 # Column address= 0x83 is mapped to SEG0
SSD1305_DISPLAYALLON_RESUME= 0xA4 #  Resume RAM content display. Output follows RAM content
SSD1305_DISPLAYALLON	   = 0xA5 # Entire display ON. Output ignores RAM content.
SSD1305_NORMALDISPLAY	  = 0xA6 # Normal display
SSD1305_INVERTDISPLAY	  = 0xA7 # Inverse display
SSD1305_SETMULTIPLEX	   = 0xA8 #= Set MUX ratio to N+1 MUX, from 16MUX to 64MUX (0 to 14 are invalid)
SSD1305_DISPLAY_ON_DIM	 = 0xAC # Display ON in dim mode
SSD1305_DCVOLTCONVERT	  = 0xAD # Selects external VCC supply
SSD1305_DISPLAYOFF		 = 0xAE # Display OFF (sleep mode)
SSD1305_DISPLAYON		  = 0xAF # Display ON in normal mode
SSD1305_SET_PAGE		   = 0xB0 # Set GDRAM Page Start Address for Page Addressing Mode - PAGE0~PAGE7
SSD1305_COMSCANDEC		 = 0xC8 # Set COM Output Scan Direction  Remapped mode. Scan from COM[N?1] to COM0
SSD1305_SETDISPLAYOFFSET   = 0xD3 # Set vertical shift by COM from 0~63.
SSD1305_SETDISPLAYCLOCKDIV = 0xB3 # * Set Display Clock Divide Ratio/Oscillator frequency
SSD1305_AREACOLOR_POWERMODE= 0xD8 # Set Area Color Mode ON/OFF & Low Power Display Mode
SSD1305_SETPRECHARGE	   = 0xD9 # Set Pre?charge Period up to 15DCLK. 0 is not valid.
SSD1305_SETCOMPINS		 = 0xDA # Sequential COM pin configuration
SSD1305_SETVCOMDETECT	  = 0xDB # Set VCOMH Deselect Level 0.43*VCC, 0.77*VCC, 0.83*VCC
SSD1305_SET_MODIFY		 = 0xE0 # Enter the Read/Modify/Write mode
SSD1305_CLR_MODIFY		 = 0xEE # Exit the Read/Modify/Write mode.
SSD1305_NOP				= 0xE3 # Command for No Operation
SSD1305_SETHORISCROLL	  = 0x26 # Horizontal scroll setup
SSD1305_SETVERTSCROLL	  = 0xA3 # Set vertical scroll area
SSD1305_SETCONTSCROLL	  = 0x29 # Continuous vertical & horizontal scroll setup
SSD1305_CLRSCROLL		  = 0x2E # Deactivate scroll
SSD1305_SETSCROLL		  = 0x2F # Activate scroll

SSD1325_SETCOLADDR= 0x15
SSD1325_SETROWADDR= 0x75
SSD1325_SETCONTRAST= 0x81
SSD1325_SETCURRENT= 0x84
SSD1325_SETREMAP= 0xA0
SSD1325_SETSTARTLINE= 0xA1
SSD1325_SETOFFSET= 0xA2
SSD1325_NORMALDISPLAY= 0xA4
SSD1325_DISPLAYALLON= 0xA5
SSD1325_DISPLAYALLOFF= 0xA6
SSD1325_INVERTDISPLAY= 0xA7
SSD1325_SETMULTIPLEX= 0xA8# =
SSD1325_MASTERCONFIG= 0xAD
SSD1325_DISPLAYOFF= 0xAE#   =
SSD1325_DISPLAYON= 0xAF#	=
SSD1325_SETPRECHARGECOMPENABLE= 0xB0
SSD1325_SETPHASELEN= 0xB1
SSD1325_SETROWPERIOD= 0xB2
SSD1325_SETCLOCK= 0xB3 #   != D5
SSD1325_SETPRECHARGECOMP= 0xB4
SSD1325_SETGRAYTABLE= 0xB8
SSD1325_SETPRECHARGEVOLTAGE= 0xBC
SSD1325_SETVCOMLEVEL= 0xBE
SSD1325_SETVSL= 0xBF
SSD1325_GFXACCEL= 0x23
SSD1325_DRAWRECT= 0x24
SSD1325_COPY= 0x25


DISPLAY_WIDTH   = 128 # X
DISPLAY_HEIGHT  = 32  # Y fix to SSD1325
PAGEMAX		 = 6 # DISPLAY_HEIGHT/8	# 48pixel/8pixel= 6 pages
GDRAM_WIDTH	 = 132
GDRAM_HEIGHT	= 32 # Is really 64
CHAR7x5_WIDTH   = 5   # 7x5 char
CHAR7x5_HEIGHT  = 8   # 7 + blank space
BUFFER_LENGTH   = 528 # 1056 # (GDRAM_WIDTH * GDRAM_HEIGHT) / 8

DISPLAY_NORMAL  = 0  # Previously 0

DISPLAY_X_MIRROR	= 1
DISPLAY_Y_MIRROR	= 2
DISPLAY_XY_MIRROR   = 3
MAX_Y_CHAR		  = 4   # DISPLAY_HEIGHT/CHAR7x5_HEIGHT
MAX_X_CHAR		  = 21  # DISPLAY_WIDTH/(CHAR7x5_WIDTH+1)

display_buffer = [0] * BUFFER_LENGTH
buffer_update = True


font = [
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x7C, 0xDA, 0xF2, 0xDA, 0x7C,
		0x7C, 0xD6, 0xF2, 0xD6, 0x7C,
		0x38, 0x7C, 0x3E, 0x7C, 0x38,
		0x18, 0x3C, 0x7E, 0x3C, 0x18,
		0x38, 0xEA, 0xBE, 0xEA, 0x38,
		0x38, 0x7A, 0xFE, 0x7A, 0x38,
		0x00, 0x18, 0x3C, 0x18, 0x00,
		0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
		0x00, 0x18, 0x24, 0x18, 0x00,
		0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
		0x0C, 0x12, 0x5C, 0x60, 0x70,
		0x64, 0x94, 0x9E, 0x94, 0x64,
		0x02, 0xFE, 0xA0, 0xA0, 0xE0,
		0x02, 0xFE, 0xA0, 0xA4, 0xFC,
		0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
		0xFE, 0x7C, 0x38, 0x38, 0x10,
		0x10, 0x38, 0x38, 0x7C, 0xFE,
		0x28, 0x44, 0xFE, 0x44, 0x28,
		0xFA, 0xFA, 0x00, 0xFA, 0xFA,
		0x60, 0x90, 0xFE, 0x80, 0xFE,
		0x00, 0x66, 0x91, 0xA9, 0x56,
		0x06, 0x06, 0x06, 0x06, 0x06,
		0x29, 0x45, 0xFF, 0x45, 0x29,
		0x10, 0x20, 0x7E, 0x20, 0x10,
		0x08, 0x04, 0x7E, 0x04, 0x08,
		0x10, 0x10, 0x54, 0x38, 0x10,
		0x10, 0x38, 0x54, 0x10, 0x10,
		0x78, 0x08, 0x08, 0x08, 0x08,
		0x30, 0x78, 0x30, 0x78, 0x30,
		0x0C, 0x1C, 0x7C, 0x1C, 0x0C,
		0x60, 0x70, 0x7C, 0x70, 0x60,
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xFA, 0x00, 0x00,
		0x00, 0xE0, 0x00, 0xE0, 0x00,
		0x28, 0xFE, 0x28, 0xFE, 0x28,
		0x24, 0x54, 0xFE, 0x54, 0x48,
		0xC4, 0xC8, 0x10, 0x26, 0x46,
		0x6C, 0x92, 0x6A, 0x04, 0x0A,
		0x00, 0x10, 0xE0, 0xC0, 0x00,
		0x00, 0x38, 0x44, 0x82, 0x00,
		0x00, 0x82, 0x44, 0x38, 0x00,
		0x54, 0x38, 0xFE, 0x38, 0x54,
		0x10, 0x10, 0x7C, 0x10, 0x10,
		0x00, 0x01, 0x0E, 0x0C, 0x00,
		0x10, 0x10, 0x10, 0x10, 0x10,
		0x00, 0x00, 0x06, 0x06, 0x00,
		0x04, 0x08, 0x10, 0x20, 0x40,
		0x7C, 0x8A, 0x92, 0xA2, 0x7C,
		0x00, 0x42, 0xFE, 0x02, 0x00,
		0x4E, 0x92, 0x92, 0x92, 0x62,
		0x84, 0x82, 0x92, 0xB2, 0xCC,
		0x18, 0x28, 0x48, 0xFE, 0x08,
		0xE4, 0xA2, 0xA2, 0xA2, 0x9C,
		0x3C, 0x52, 0x92, 0x92, 0x8C,
		0x82, 0x84, 0x88, 0x90, 0xE0,
		0x6C, 0x92, 0x92, 0x92, 0x6C,
		0x62, 0x92, 0x92, 0x94, 0x78,
		0x00, 0x00, 0x28, 0x00, 0x00,
		0x00, 0x02, 0x2C, 0x00, 0x00,
		0x00, 0x10, 0x28, 0x44, 0x82,
		0x28, 0x28, 0x28, 0x28, 0x28,
		0x00, 0x82, 0x44, 0x28, 0x10,
		0x40, 0x80, 0x9A, 0x90, 0x60,
		0x7C, 0x82, 0xBA, 0x9A, 0x72,
		0x3E, 0x48, 0x88, 0x48, 0x3E,
		0xFE, 0x92, 0x92, 0x92, 0x6C,
		0x7C, 0x82, 0x82, 0x82, 0x44,
		0xFE, 0x82, 0x82, 0x82, 0x7C,
		0xFE, 0x92, 0x92, 0x92, 0x82,
		0xFE, 0x90, 0x90, 0x90, 0x80,
		0x7C, 0x82, 0x82, 0x8A, 0xCE,
		0xFE, 0x10, 0x10, 0x10, 0xFE,
		0x00, 0x82, 0xFE, 0x82, 0x00,
		0x04, 0x02, 0x82, 0xFC, 0x80,
		0xFE, 0x10, 0x28, 0x44, 0x82,
		0xFE, 0x02, 0x02, 0x02, 0x02,
		0xFE, 0x40, 0x38, 0x40, 0xFE,
		0xFE, 0x20, 0x10, 0x08, 0xFE,
		0x7C, 0x82, 0x82, 0x82, 0x7C,
		0xFE, 0x90, 0x90, 0x90, 0x60,
		0x7C, 0x82, 0x8A, 0x84, 0x7A,
		0xFE, 0x90, 0x98, 0x94, 0x62,
		0x64, 0x92, 0x92, 0x92, 0x4C,
		0xC0, 0x80, 0xFE, 0x80, 0xC0,
		0xFC, 0x02, 0x02, 0x02, 0xFC,
		0xF8, 0x04, 0x02, 0x04, 0xF8,
		0xFC, 0x02, 0x1C, 0x02, 0xFC,
		0xC6, 0x28, 0x10, 0x28, 0xC6,
		0xC0, 0x20, 0x1E, 0x20, 0xC0,
		0x86, 0x9A, 0x92, 0xB2, 0xC2,
		0x00, 0xFE, 0x82, 0x82, 0x82,
		0x40, 0x20, 0x10, 0x08, 0x04,
		0x00, 0x82, 0x82, 0x82, 0xFE,
		0x20, 0x40, 0x80, 0x40, 0x20,
		0x02, 0x02, 0x02, 0x02, 0x02,
		0x00, 0xC0, 0xE0, 0x10, 0x00,
		0x04, 0x2A, 0x2A, 0x1E, 0x02,
		0xFE, 0x14, 0x22, 0x22, 0x1C,
		0x1C, 0x22, 0x22, 0x22, 0x14,
		0x1C, 0x22, 0x22, 0x14, 0xFE,
		0x1C, 0x2A, 0x2A, 0x2A, 0x18,
		0x00, 0x10, 0x7E, 0x90, 0x40,
		0x18, 0x25, 0x25, 0x39, 0x1E,
		0xFE, 0x10, 0x20, 0x20, 0x1E,
		0x00, 0x22, 0xBE, 0x02, 0x00,
		0x04, 0x02, 0x02, 0xBC, 0x00,
		0xFE, 0x08, 0x14, 0x22, 0x00,
		0x00, 0x82, 0xFE, 0x02, 0x00,
		0x3E, 0x20, 0x1E, 0x20, 0x1E,
		0x3E, 0x10, 0x20, 0x20, 0x1E,
		0x1C, 0x22, 0x22, 0x22, 0x1C,
		0x3F, 0x18, 0x24, 0x24, 0x18,
		0x18, 0x24, 0x24, 0x18, 0x3F,
		0x3E, 0x10, 0x20, 0x20, 0x10,
		0x12, 0x2A, 0x2A, 0x2A, 0x24,
		0x20, 0x20, 0xFC, 0x22, 0x24,
		0x3C, 0x02, 0x02, 0x04, 0x3E,
		0x38, 0x04, 0x02, 0x04, 0x38,
		0x3C, 0x02, 0x0C, 0x02, 0x3C,
		0x22, 0x14, 0x08, 0x14, 0x22,
		0x32, 0x09, 0x09, 0x09, 0x3E,
		0x22, 0x26, 0x2A, 0x32, 0x22,
		0x00, 0x10, 0x6C, 0x82, 0x00,
		0x00, 0x00, 0xEE, 0x00, 0x00,
		0x00, 0x82, 0x6C, 0x10, 0x00,
		0x40, 0x80, 0x40, 0x20, 0x40,
		0x3C, 0x64, 0xC4, 0x64, 0x3C,
		0x78, 0x85, 0x85, 0x86, 0x48,
		0x5C, 0x02, 0x02, 0x04, 0x5E,
		0x1C, 0x2A, 0x2A, 0xAA, 0x9A,
		0x84, 0xAA, 0xAA, 0x9E, 0x82,
		0x84, 0x2A, 0x2A, 0x1E, 0x82,
		0x84, 0xAA, 0x2A, 0x1E, 0x02,
		0x04, 0x2A, 0xAA, 0x9E, 0x02,
		0x30, 0x78, 0x4A, 0x4E, 0x48,
		0x9C, 0xAA, 0xAA, 0xAA, 0x9A,
		0x9C, 0x2A, 0x2A, 0x2A, 0x9A,
		0x9C, 0xAA, 0x2A, 0x2A, 0x1A,
		0x00, 0x00, 0xA2, 0x3E, 0x82,
		0x00, 0x40, 0xA2, 0xBE, 0x42,
		0x00, 0x80, 0xA2, 0x3E, 0x02,
		0x0F, 0x94, 0x24, 0x94, 0x0F,
		0x0F, 0x14, 0xA4, 0x14, 0x0F,
		0x3E, 0x2A, 0xAA, 0xA2, 0x00,
		0x04, 0x2A, 0x2A, 0x3E, 0x2A,
		0x3E, 0x50, 0x90, 0xFE, 0x92,
		0x4C, 0x92, 0x92, 0x92, 0x4C,
		0x4C, 0x12, 0x12, 0x12, 0x4C,
		0x4C, 0x52, 0x12, 0x12, 0x0C,
		0x5C, 0x82, 0x82, 0x84, 0x5E,
		0x5C, 0x42, 0x02, 0x04, 0x1E,
		0x00, 0xB9, 0x05, 0x05, 0xBE,
		0x9C, 0x22, 0x22, 0x22, 0x9C,
		0xBC, 0x02, 0x02, 0x02, 0xBC,
		0x3C, 0x24, 0xFF, 0x24, 0x24,
		0x12, 0x7E, 0x92, 0xC2, 0x66,
		0xD4, 0xF4, 0x3F, 0xF4, 0xD4,
		0xFF, 0x90, 0x94, 0x6F, 0x04,
		0x03, 0x11, 0x7E, 0x90, 0xC0,
		0x04, 0x2A, 0x2A, 0x9E, 0x82,
		0x00, 0x00, 0x22, 0xBE, 0x82,
		0x0C, 0x12, 0x12, 0x52, 0x4C,
		0x1C, 0x02, 0x02, 0x44, 0x5E,
		0x00, 0x5E, 0x50, 0x50, 0x4E,
		0xBE, 0xB0, 0x98, 0x8C, 0xBE,
		0x64, 0x94, 0x94, 0xF4, 0x14,
		0x00, 0x60, 0x90, 0x90, 0x60,
		0x0C, 0x12, 0xB2, 0x02, 0x04,
		0x1C, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x10, 0x10, 0x1C,
		0xF4, 0x08, 0x13, 0x35, 0x5D,
		0xF4, 0x08, 0x14, 0x2C, 0x5F,
		0x00, 0x00, 0xDE, 0x00, 0x00,
		0x10, 0x28, 0x54, 0x28, 0x44,
		0x44, 0x28, 0x54, 0x28, 0x10,
		0x55, 0x00, 0xAA, 0x00, 0x55,
		0x55, 0xAA, 0x55, 0xAA, 0x55,
		0x00, 0x00, 0x00, 0xFF, 0x00,
		0x08, 0x08, 0x08, 0xFF, 0x00,
		0x28, 0x28, 0x28, 0xFF, 0x00,
		0x08, 0x08, 0xFF, 0x00, 0xFF,
		0x08, 0x08, 0x0F, 0x08, 0x0F,
		0x28, 0x28, 0x28, 0x3F, 0x00,
		0x28, 0x28, 0xEF, 0x00, 0xFF,
		0x00, 0x00, 0xFF, 0x00, 0xFF,
		0x28, 0x28, 0x2F, 0x20, 0x3F,
		0x28, 0x28, 0xE8, 0x08, 0xF8,
		0x08, 0x08, 0xF8, 0x08, 0xF8,
		0x28, 0x28, 0x28, 0xF8, 0x00,
		0x08, 0x08, 0x08, 0x0F, 0x00,
		0x00, 0x00, 0x00, 0xF8, 0x08,
		0x08, 0x08, 0x08, 0xF8, 0x08,
		0x08, 0x08, 0x08, 0x0F, 0x08,
		0x00, 0x00, 0x00, 0xFF, 0x08,
		0x08, 0x08, 0x08, 0x08, 0x08,
		0x08, 0x08, 0x08, 0xFF, 0x08,
		0x00, 0x00, 0x00, 0xFF, 0x28,
		0x00, 0x00, 0xFF, 0x00, 0xFF,
		0x00, 0x00, 0xF8, 0x08, 0xE8,
		0x00, 0x00, 0x3F, 0x20, 0x2F,
		0x28, 0x28, 0xE8, 0x08, 0xE8,
		0x28, 0x28, 0x2F, 0x20, 0x2F,
		0x00, 0x00, 0xFF, 0x00, 0xEF,
		0x28, 0x28, 0x28, 0x28, 0x28,
		0x28, 0x28, 0xEF, 0x00, 0xEF,
		0x28, 0x28, 0x28, 0xE8, 0x28,
		0x08, 0x08, 0xF8, 0x08, 0xF8,
		0x28, 0x28, 0x28, 0x2F, 0x28,
		0x08, 0x08, 0x0F, 0x08, 0x0F,
		0x00, 0x00, 0xF8, 0x08, 0xF8,
		0x00, 0x00, 0x00, 0xF8, 0x28,
		0x00, 0x00, 0x00, 0x3F, 0x28,
		0x00, 0x00, 0x0F, 0x08, 0x0F,
		0x08, 0x08, 0xFF, 0x08, 0xFF,
		0x28, 0x28, 0x28, 0xFF, 0x28,
		0x08, 0x08, 0x08, 0xF8, 0x00,
		0x00, 0x00, 0x00, 0x0F, 0x08,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
		0xFF, 0xFF, 0xFF, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xFF, 0xFF,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0x1C, 0x22, 0x22, 0x1C, 0x22,
		0x3E, 0x54, 0x54, 0x7C, 0x28,
		0x7E, 0x40, 0x40, 0x60, 0x60,
		0x40, 0x7E, 0x40, 0x7E, 0x40,
		0xC6, 0xAA, 0x92, 0x82, 0xC6,
		0x1C, 0x22, 0x22, 0x3C, 0x20,
		0x02, 0x7E, 0x04, 0x78, 0x04,
		0x60, 0x40, 0x7E, 0x40, 0x40,
		0x99, 0xA5, 0xE7, 0xA5, 0x99,
		0x38, 0x54, 0x92, 0x54, 0x38,
		0x32, 0x4E, 0x80, 0x4E, 0x32,
		0x0C, 0x52, 0xB2, 0xB2, 0x0C,
		0x0C, 0x12, 0x1E, 0x12, 0x0C,
		0x3D, 0x46, 0x5A, 0x62, 0xBC,
		0x7C, 0x92, 0x92, 0x92, 0x00,
		0x7E, 0x80, 0x80, 0x80, 0x7E,
		0x54, 0x54, 0x54, 0x54, 0x54,
		0x22, 0x22, 0xFA, 0x22, 0x22,
		0x02, 0x8A, 0x52, 0x22, 0x02,
		0x02, 0x22, 0x52, 0x8A, 0x02,
		0x00, 0x00, 0xFF, 0x80, 0xC0,
		0x07, 0x01, 0xFF, 0x00, 0x00,
		0x10, 0x10, 0xD6, 0xD6, 0x10,
		0x6C, 0x48, 0x6C, 0x24, 0x6C,
		0x60, 0xF0, 0x90, 0xF0, 0x60,
		0x00, 0x00, 0x18, 0x18, 0x00,
		0x00, 0x00, 0x08, 0x08, 0x00,
		0x0C, 0x02, 0xFF, 0x80, 0x80,
		0x00, 0xF8, 0x80, 0x80, 0x78,
		0x00, 0x98, 0xB8, 0xE8, 0x48,
		0x00, 0x3C, 0x3C, 0x3C, 0x3C,
		0x00, 0x00, 0x00, 0x00, 0x00
	];


class spibus():
	fd=None
	write_buffer=create_string_buffer(50)
	read_buffer=create_string_buffer(50)

	ioctl_arg = spi_ioc_transfer(
		tx_buf=addressof(write_buffer),
		rx_buf=addressof(read_buffer),
		len=1,
		delay_usecs=0,
		speed_hz=4000000,
		bits_per_word=8,
		cs_change = 0,
	)

	def __init__(self,device):
		self.fd = posix.open(device, posix.O_RDWR)
		ioctl(self.fd, SPI_IOC_RD_MODE, " ")
		ioctl(self.fd, SPI_IOC_WR_MODE, struct.pack('I',0))

	def send(self,len):
		self.ioctl_arg.len=len
		ioctl(self.fd, SPI_IOC_MESSAGE(1),addressof(self.ioctl_arg))

	def simplesend(self, data):
		self.write_buffer[0] = chr(data)
		self.send(1)

	def delay100ms(self):
		time.sleep(0.1)

	def gpioexport(self, gpioid):
		print "Exporting: {}".format(gpioid)
		if not path.isdir('/sys/class/gpio/pioC' + str(gpioid)):
			f = open("/sys/class/gpio/export","wb")
			f.write(gpioid)
			f.close()

	def gpiosetdir(self, gpioid, mode):
		f = open("/sys/class/gpio/pioC" + str(gpioid) + "/direction", "wb")
		f.write(mode)
		f.close()

	def gpiosetbits(self, gpioid):
		f = open("/sys/class/gpio/pioC" + str(gpioid) + "/value", "wb")
		f.write("1")
		f.close()

	def gpioclearbits(self, gpioid):
		f = open("/sys/class/gpio/pioC" + str(gpioid) + "/value", "wb")
		f.write("0")
		f.close()

	def oled_write_command(self, command):
		print "Writing command: {}".format(command)
		self.gpioclearbits(3)
		self.simplesend(command)

	def oled_write_data(self, data):
		print "Writing data: {}".format(data)
		self.gpiosetbits(3)
		self.simplesend(data)

	def get_buffer_position(self, X, Y, i):
		return (X * (CHAR7x5_WIDTH + 1)) + i + 396 - (Y * GDRAM_WIDTH);

	def oled_buffer_putc(self, character, X, Y, hL):

		if (X >= MAX_X_CHAR or Y >= MAX_Y_CHAR):
			return

		for i in range(0, CHAR7x5_WIDTH):
			c = font[(ord(character) * CHAR7x5_WIDTH) + i]
			#if hL:
				#c = ~c
			dispBuffPos = self.get_buffer_position(X, Y, i)
			print "Buffer length: {}".format(BUFFER_LENGTH)
			print "Needed pos: {}".format(dispBuffPos)
			print "C: {}".format(c)
			display_buffer[dispBuffPos] = c

	def oled_buffer_puts(self, inputStr, X, Y, hL):

		for i in range(0, len(inputStr)):
			self.oled_buffer_putc(inputStr[i], X + i, Y, hL)

	def oled_buffer_update(self):	
		for i in range(0, BUFFER_LENGTH):
			self.oled_write_data(display_buffer[i])


	def oled_init(self):
		#self.gpioexport(str(SSD1325_DCX));	#EXPORT DATA COMAND OLED
		#self.gpioexport(str(SSD1325_RST));	#EXPORT RESET OLED
		self.gpiosetdir(3,"out");  #DATA COMAND OUTPUTPIN
		self.gpiosetdir(4,"out");  #RESET	 OUTPUTPIN

		#LCD_DC = 0;
		self.gpioclearbits(3); #DATA COMAND LOW 
	  	#LCD_CS = 0;
		#gpioclearbits(SSD1325_CS);  #CHIP SELECT LOW
		#LCD_RS = 0;
		self.gpioclearbits(4); #RESET INIT
		self.delay100ms(); #delay for the reset
		#LCD_RS = 1;
		self.gpiosetbits(4);   #RESET FINISH
		self.oled_write_command(SSD1305_DISPLAYOFF); #ok

		# oled_write_command(SSD1305_DISPLAYOFF); #ok

		# #oled_write_command(SSD1305_SETLOWCOLUMN + 0x00); # 0x00-0x0F set low column address
		# #oled_write_command(SSD1305_SETHIGHCOLUMN + 0x00);# 0x10-0x1F set high column address
		# # Set column Adress 34 = 0x02 low + 0x12 high

		# oled_write_command(SSD1305_SETDISPLAYCLOCKDIV);
		# oled_write_command(0xA0); #Set to 130Hz

		# oled_write_command(SSD1305_SETMULTIPLEX);
		# #oled_write_command(0x2F);					 # set for 1/48, from 16MUX to 64MUX, RESET=111111b (i.e. 64MUX)
		# #oled_write_command(0x3F);
		# oled_write_command(0x1F); #1/32 Duty (0x0F~0x3F)

		# oled_write_command(SSD1305_SETDISPLAYOFFSET); # Set vertical shift by COM from 0~63.
		# oled_write_command(0x00); # 48px by 0xC8 = (COM[N-1] - 0)
		# # 0px by (0xC0 = (0 - COM[N-1]

		# oled_write_command(SSD1305_SETSTARTLINE); # Set display start line (0x40 = start at line 0)
		# oled_write_command(SSD1305_NORMALDISPLAY);

		# oled_write_command(SSD1305_DCVOLTCONVERT);
		# oled_write_command(0x8E); # 0x8E = Select external VCC supply (RESET)

		# oled_write_command(SSD1305_AREACOLOR_POWERMODE);
		# oled_write_command(0x00); # monochrome mode & Normal power mode
		# #oled_write_command(0x05);			# monochrome mode & low power mode

		# oled_write_command(SSD1305_SEGREMAP0); #Column address 0 is mapped to SEG0 (normal)
		# #oled_write_command(SSD1305_SEGREMAP1); #Column address 0x83 is mapped to SEG0 (reversed)

		# oled_write_command(SSD1305_COMSCANDEC); # set com output scan direction

		# oled_write_command(SSD1305_SETCOMPINS);
		# oled_write_command(0x12); # Disable COM Left/Right remap

		# oled_write_command(SSD1305_LOOK_UP_TABLE); # Set current drive pulse width of BANK0,
		# oled_write_command(0x3F); # BANK0: X[5:0] = 31? 63;
		# oled_write_command(0x3F); # Color A: A[5:0] same as above (RESET = 111111b)
		# oled_write_command(0x3F); # Color B: B[5:0] same as above (RESET = 111111b)
		# oled_write_command(0x3F); # Color C: C[5:0] same as above (RESET = 111111b)

		# oled_write_command(SSD1305_SETCONTRAST); #contrast control mode
		# oled_write_command(0xAA);
		# #oled_write_command(0x8F);

		# oled_write_command(SSD1305_SETBRIGHTNESS); # Set Brightness For Area Color Banks
		# oled_write_command(0x5F); # select 1 out of 256 brightness steps.

		# oled_write_command(SSD1305_SETPRECHARGE); #Set discharge/precharge period
		# oled_write_command(0xD2); # (A3 - A0 pre charge, A7 - A4 dis charge) period adjustment
		# # Set Pre-Charge as 13 Clocks & Discharge as 2 Clock
		# oled_write_command(SSD1305_SETVCOMDETECT);
		# oled_write_command(0x34); # ~ 0.77 x VCC (RESET)

		# oled_write_command(SSD1305_DISPLAYALLON_RESUME);
		# oled_write_command(SSD1305_NORMALDISPLAY);

		# oled_write_command(SSD1305_MEMORYMODE);
		# oled_write_command(0x00); #0x00, Horizontal Addressing Mode
		# #oled_write_command(0x01); #0x01, Vertical Addressing Mode
		# #oled_write_command(0x02); #0x02, Page Addressing Mode (RESET)
		self.oled_write_command(SSD1325_SETCLOCK); # set osc division */
		self.oled_write_command(0xF1); # 145 */
		self.oled_write_command(SSD1325_SETMULTIPLEX ); # multiplex ratio */
		self.oled_write_command(0x3f); # duty = 1/64 */
		self.oled_write_command( SSD1325_SETOFFSET); # set display offset --- */
		self.oled_write_command(0x4C); # 76 */
		self.oled_write_command(SSD1325_SETSTARTLINE); #set start line */
		self.oled_write_command(0x00); # ------ */
		self.oled_write_command(SSD1325_MASTERCONFIG); #Set Master Config DC/DC Converter*/
		self.oled_write_command(0x02);
		self.oled_write_command(SSD1325_SETREMAP); # set segment remap------ */
		self.oled_write_command(0x50);
		#command(0x52);

		self.oled_write_command(SSD1325_SETCURRENT + 0x2); # Set Full Current Range */
		self.oled_write_command(SSD1325_SETGRAYTABLE);
		self.oled_write_command(0x01);
		self.oled_write_command(0x11);
		self.oled_write_command(0x22);
		self.oled_write_command(0x32);
		self.oled_write_command(0x43);
		self.oled_write_command(0x54);
		self.oled_write_command(0x65);
		self.oled_write_command(0x76);


		self.oled_write_command(SSD1325_SETCONTRAST); # set contrast current */
		self.oled_write_command(0xFF);  # max!

		self.oled_write_command(SSD1325_SETROWPERIOD);
		self.oled_write_command(0x51);
		self.oled_write_command(SSD1325_SETPHASELEN);
		self.oled_write_command(0x55);
		self.oled_write_command(SSD1325_SETPRECHARGECOMP);
		self.oled_write_command(0x02);
		self.oled_write_command(SSD1325_SETPRECHARGECOMPENABLE);
		self.oled_write_command(0x28);
		self.oled_write_command(SSD1325_SETVCOMLEVEL); # Set High Voltage Level of COM Pin
		self.oled_write_command(0x1C); #?
		self.oled_write_command(SSD1325_SETVSL); # set Low Voltage Level of SEG Pin 
		self.oled_write_command(0x0F);
		  
		self.oled_write_command(SSD1325_NORMALDISPLAY); # set display mode */
		# Clear Screen */  
		#oled_write_command(0x23); #set graphic acceleration commmand */
		#oled_write_command(SSD1325_GFXACCEL);
		#oled_write_command(SSD1325_DRAWRECT); # draw rectangle */
		#oled_write_command(0x00); # Gray Scale Level 1 */
		#oled_write_command(0x00); # Gray Scale Level 3 & 2 */
		#oled_write_command(0x3f); # Gray Scale Level 3 & 2 */
		#oled_write_command(0x3f); # Gray Scale Level 3 & 2 */
		#oled_write_command(0x00); # Gray Scale Level 3 & 2 */
		self.delay100ms();

		#oled_clear_display();

		self.oled_write_command(SSD1305_DISPLAYON);



#Open the SPI bus 0
spibus0 = spibus("/dev/spidev32766.0")

#Send two characters
#spibus0.write_buffer[0]=chr(0x55)
#spibus0.write_buffer[1]=chr(0xAA)

#spibus0.send(2)

#Shows the 2 byte received in full duplex in hex format
#print hex(ord(spibus0.read_buffer[0]))
#print hex(ord(spibus0.read_buffer[1]))


#Now test the OLED screen
spibus0.oled_init()

for k in range(0, 10):
	spibus0.oled_buffer_puts("Hola", 0 + k, 0 + k, False)
	buffer_update = True
	spibus0.oled_buffer_update()
	time.sleep(1)